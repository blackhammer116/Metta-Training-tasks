(= (flatten ()) (empty))
(= (flatten ($x $xs))
    (let*
        (
            ($y (if (== $xs ()) () (flatten $xs)))
        )
        (cons-atom $x $y)
    )
)
(: isSymbol (-> Expression Bool))
(= (isSymbol $expr) (== (get-metatype $expr) Symbol))

(: appendAtom (-> Atom Atom Atom))
(= (appendAtom $a $atom) (foldr cons-atom ($a) $atom))

; (: foldr (-> (-> $a $b $b) $b $c $d))
; (= (foldr $f $i $xs)
;    (if (== $xs ())
;        $i
;        (let* (($h (car-atom $xs))
;               ($t (cdr-atom $xs))
;               ($ft (foldr $f $i $t)))
;          ($f $h $ft)
;         )
;     )
; )


(= (++ $x $y)
   (case ((isSymbol $x) (isSymbol $y))
      (
        ((True True)  ($x $y))
        ((True False) (cons-atom $x $y))
        ((False True) (appendAtom $y $x))
        ((False False)  (foldr cons-atom $y $x)))))

(= (extract ()) ())
(= (extract ($x $xs))
    (let*
        (
            ($y (if (== $xs ()) () (extract $xs)))
        )
        (cons-atom $x $y)
    )
)
;; use non-determinisim pattern matching with combination of recursion
; (= (concatTuple ()) (empty))
; (= (concatTuple () ()) (empty))
; (= (concatTuple $x) (println! (First $x)))
(= (concatTuple $x)
    (if (== $x ()) ()
    (let*
        (
            (() (println! (isSymbol $x)))
            (() (println! (before car atom $x)))
            ($head (if (== (isSymbol $x) True) $x (car-atom $x)))
            (() (println! (before cdr atom $x)))
            ($tail (if (== (cdr-atom $x) ()) $x  (cdr-atom $x)))
        )
        ($head (concatTuple $tail))
    )
    )
    ; (println! (((car-atom $x)) (concatTuple (cdr-atom $x))))
    ; (if (== (size-atom $x) 1)
    ;     (car-atom $x)
    ;     ((car-atom $x) (concatTuple (cdr-atom $x)))
    ; )
)
(= (concatTuple $x $y)
    (if (and (== $x ()) (== $y ()))
        (empty)
        (if (== $x ())
            ; ((car-atom $y) (concatTuple (cdr-atom $y)))
            (flatten ((car-atom $y)  (concatTuple (cdr-atom $y))))
            (if (== $y ())
                (flatten ((car-atom $x) (concatTuple (cdr-atom $x))))
                (cons-atom (flatten ((car-atom $x) (concatTuple (cdr-atom $x)))) ((flatten ((car-atom $y) (concatTuple (cdr-atom $y))))))
            )
        )
    )
    ; ((car-atom $x) (concatTuple (cdr-atom $x)) (car-atom $y) (concatTuple (cdr-atom $y)))
    ; (let*
    ;     (
    ;         ($headX (decons-atom $x))
    ;         ($headY (decons-atom $y))
    ;         ($tailX (cdr-atom $x))
    ;         ($tailY (cdr-atom $y))
    ;     )
    ;     ((concatTuple $headX) (concatTuple $headY))
    ; )
    ; ((concatTuple $x) (concatTuple $y))
)
; !(car-atom ((1)))
; !(concatTuple (A B asd s) (C D))
; !(concatTuple () (a d f))
; !(concatTuple (a b b) ())
; !(++ (a b c) (d e f))
; !(cdr-atom (empty))
; !(assertEqualToResult (++ () (3 4)) ((3 4)))
; !(assertEqualToResult (++ (1 2) (3 4)) ((1 2 3 4)))
; !(assertEqualToResult (++ (1 2) ()) ((1 2)))
; !(assertEqualToResult (++ () ()) (()))
(= (extract ()) ())
(= (extract ($x $xs))
    (let*
        (
            ($y (if (isSymbol $xs) $xs (extract $xs)))
        )
        (cons-atom $x $y)
    )
)
(= (foldr $f $i $xs)
   (if (== $xs ())
       $i
       (let* (($h (car-atom $xs))
              ($t (cdr-atom $xs))
              ($ft (foldr $f $i $t)))
         ($f $h $ft))))
(= (append_end $x ())
    ($x)
)
(= (append_end $y $xs)
    (let*
        (
            ($h (car-atom $xs))
            (() (println! $h))
            ($t (cdr-atom $xs))
            (() (println! $xs))
            ($rest (append_end $y $t))
        )
    )
    (cons-atom $h $rest)
)

; (: reverse (-> (List $n) (List $n)))
(= (reverse $x)
    (let*
        (
            ($h (car-atom $x))
            ($t (cdr-atom $x))
        )
        (if (== $t ())
            ; (append_end $h $t)
            ($h)
            (appendAtom $h (reverse $t))
            ; ((reverse $t) $h)
        )
    )
)

!(reverse (1 2 3 4 5))